import React from "react";
import { useParams, useNavigate } from "react-router-dom";
import { settlements } from "../data/settlements";
import "./SettlementPage.css";

const SettlementPage = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const settlement = settlements.find((s) => s.id === parseInt(id));

  if (!settlement) {
    return (
      <div className="settlement-page">
        <div className="container">
          <h1>–ü–æ—Å–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω</h1>
          <button onClick={() => navigate("/")} className="btn">
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ä—Ç–µ
          </button>
        </div>
      </div>
    );
  }

  const openRoute = () => {
    const [lat, lon] = settlement.coordinates;
    const url = `https://yandex.ru/maps/?rtext=~${lat},${lon}&rtt=auto`;
    window.open(url, "_blank");
  };

  const openNavigator = () => {
    const [lat, lon] = settlement.coordinates;
    const url = `yandexnavi://build_route_on_map?lat_to=${lat}&lon_to=${lon}`;
    window.location.href = url;
  };

  // –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –ø–µ—Ä–≤–æ–º—É —Ñ–æ—Ç–æ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç–∏ –∫ –∫–∞—Ä—Ç–µ/—Å—Ö–µ–º–µ
  const firstImage = (settlement.images && settlement.images[0]) || "";
  const imagesFolder = firstImage
    ? firstImage.substring(0, firstImage.lastIndexOf("/"))
    : "/images/settlements/ilinskie_dachi";
  const mapImagePath = `${imagesFolder}/map.jpeg`;
  // –û–±—â–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è "–∫–∞–∫ –Ω–∞–π—Ç–∏ —É—á–∞—Å—Ç–æ–∫" (–µ–¥–∏–Ω–∞—è –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü)
  const howFindGlobal = "/images/settlements/ilinskoe/how_find.jpeg";

  return (
    <div className="settlement-page">
      <header className="settlement-header">
        <div className="container">
          <button
            onClick={() => navigate("/")}
            className="back-btn"
            aria-label="–ù–∞–∑–∞–¥ –∫ –∫–∞—Ä—Ç–µ"
          >
            <span className="back-btn__icon">‚Üê</span>
            <span className="back-btn__label">–ù–∞–∑–∞–¥ –∫ –∫–∞—Ä—Ç–µ</span>
          </button>
        </div>
      </header>

      <main className="settlement-main">
        <div className="container">
          <div className="settlement-content">
            <div className="settlement-info">
              {(() => {
                const firstImage =
                  (settlement.images && settlement.images[0]) || "";
                const folder = firstImage
                  ? firstImage.substring(0, firstImage.lastIndexOf("/"))
                  : "/images/settlements";
                const logoPath = `${folder}/logo.jpeg`;
                return (
                  <div
                    style={{ display: "flex", alignItems: "center", gap: 12 }}
                  >
                    <img
                      src={logoPath}
                      alt="logo"
                      className="settlement-logo"
                    />
                    <h1 style={{ margin: 0, lineHeight: 1.2 }}>
                      {settlement.name}
                    </h1>
                  </div>
                );
              })()}
              <p className="settlement-description">{settlement.description}</p>

              <div className="settlement-details">
                <div className="detail-item">
                  <strong>–¶–µ–Ω–∞:</strong> {settlement.price}
                </div>
                <div className="detail-item">
                  <strong>–ü–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–æ–≤:</strong> {settlement.area}
                </div>
                <div className="detail-item">
                  <strong>–ê–¥—Ä–µ—Å:</strong> {settlement.address}
                </div>
                <div className="detail-item">
                  <strong>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –¢–≤–µ—Ä–∏:</strong>{" "}
                  {settlement.distanceToTver}
                </div>
              </div>

              <div className="settlement-features">
                <h3>–£–¥–æ–±—Å—Ç–≤–∞:</h3>
                <ul>
                  {settlement.features.map((feature, index) => (
                    <li key={index}>{feature}</li>
                  ))}
                </ul>
              </div>

              <div className="navigation-buttons">
                <button onClick={openRoute} className="btn">
                  –ü—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö
                </button>
                <button onClick={openNavigator} className="btn btn-secondary">
                  –û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ù–∞–≤–∏–≥–∞—Ç–æ—Ä–µ
                </button>
                <button
                  className="btn btn-secondary"
                  onClick={() => {
                    window.open(howFindGlobal, "_blank");
                  }}
                >
                  –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –∫–∞–∫ –Ω–∞–π—Ç–∏ —É—á–∞—Å—Ç–æ–∫
                </button>
              </div>
            </div>

            <div className="settlement-scheme">
              <h3>–°—Ö–µ–º–∞ —É—á–∞—Å—Ç–∫–æ–≤</h3>
              <div className="scheme-container">
                <img
                  src={mapImagePath}
                  alt="–°—Ö–µ–º–∞ —É—á–∞—Å—Ç–∫–æ–≤"
                  className="scheme-image"
                  onClick={() => {
                    const modal = document.createElement("div");
                    modal.className = "scheme-modal";
                    modal.innerHTML = `
                      <div class="scheme-modal-content">
                        <span class="scheme-modal-close">&times;</span>
                        <img src="${mapImagePath}" alt="–°—Ö–µ–º–∞ —É—á–∞—Å—Ç–∫–æ–≤" class="scheme-modal-image">
                      </div>
                    `;
                    document.body.appendChild(modal);

                    const closeModal = () => {
                      document.body.removeChild(modal);
                    };

                    modal.querySelector(".scheme-modal-close").onclick =
                      closeModal;
                    modal.onclick = (e) => {
                      if (e.target === modal) closeModal();
                    };
                  }}
                />
                <div className="scheme-download">
                  <button
                    className="btn btn-primary"
                    onClick={() => {
                      const link = document.createElement("a");
                      link.href = mapImagePath;
                      link.download = "map.jpeg";
                      link.click();
                    }}
                  >
                    üì• –°–∫–∞—á–∞—Ç—å —Å—Ö–µ–º—É
                  </button>
                </div>
              </div>
            </div>

            <div className="settlement-images">
              <h3>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ—Å–µ–ª–∫–∞</h3>
              <div className="image-gallery">
                {settlement.images.map((image, index) => (
                  <div key={index} className="image-item">
                    <img
                      src={image}
                      alt={`–§–æ—Ç–æ –ø–æ—Å–µ–ª–∫–∞ ${index + 1}`}
                      className="settlement-image"
                      onError={(e) => {
                        e.target.style.display = "none";
                        e.target.nextSibling.style.display = "block";
                      }}
                    />
                    <div
                      className="image-placeholder"
                      style={{ display: "none" }}
                    >
                      <p>–§–æ—Ç–æ {index + 1}</p>
                      <small>{image}</small>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
};

export default SettlementPage;
